{
    "swagger": "2.0",
    "info": {
        "version": "1.0",
        "title": "Kaudio API",
        "description": "Kaudio API\n\nhttps://github.com/BafS/Kaudio",
        "license": {
            "name": "MIT",
            "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
        }
    },
    "host": "localhost:3030",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/albums": {
            "get": {
                "description": "Gets a list of all albums. Each of these contains a list of ObjectId to the various tracks on the album.",
                "tags": [
                    "Album"
                ],
                "operationId": "Find albums",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "title[$search]",
                        "in": "query",
                        "description": "yes",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array with all available albums"
                    }
                },
                "security": []
            },
            "post": {
                "description": "Creates a new album on the server. TODO: restrict access to admin.",
                "tags": [
                    "Album"
                ],
                "operationId": "Create album",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAlbumrequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created album"
                    }
                },
                "security": []
            }
        },
        "/albums/{albumId}": {
            "get": {
                "description": "Gets a list of all albums. Each of these contains a list of ObjectId to the various tracks on the album.",
                "tags": [
                    "Album"
                ],
                "operationId": "Get album by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "albumId",
                        "in": "path",
                        "description": "ID of searched album",
                        "required": true,
                        "type": "string",
                        "format": "ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested album"
                    },
                    "default": {
                        "description": "Cannot find album with this ID"
                    }
                },
                "security": []
            }
        },
        "/auth/local": {
            "post": {
                "description": "Used to verify user identity. Returns a JWT that must be included as a header (Authorization - bearer [JWT]) for all authenticated calls on the API.",
                "tags": [
                    "Authentication"
                ],
                "operationId": "Auth (local)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Auth(local)request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested user with his JWT"
                    }
                },
                "security": []
            }
        },
        "/playlists": {
            "get": {
                "description": "Returns a list of all playlists. TODO: return only public playlists",
                "tags": [
                    "Playlist"
                ],
                "operationId": "Index playlists",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "An array of all playlists"
                    }
                },
                "security": []
            },
            "post": {
                "description": "Creates a new playlist. tracks_ref must be an array of ObjectIds pointing to existing tracks",
                "tags": [
                    "Playlist"
                ],
                "operationId": "Create playlist",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreatePlaylistrequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created playlist"
                    }
                },
                "security": []
            }
        },
        "/playlist/{playlistId}": {
            "get": {
                "description": "Returns the playlist with tracks, albums and artist embedded. Note: Response format may be subject to change in the future.",
                "tags": [
                    "Playlist"
                ],
                "operationId": "Get playlist",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "playlistId",
                        "in": "path",
                        "description": "ID of searched playlist",
                        "required": true,
                        "type": "string",
                        "format": "ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The searched playlist"
                    },
                    "default": {
                        "description": "Cannot find playlist with this ID"
                    }
                },
                "security": []
            }
        },
        "/tracks": {
            "get": {
                "description": "Returns the info for a track with album and artist embedded. Note: Response format may be subject to change in the future.",
                "tags": [
                    "Track"
                ],
                "operationId": "Index tracks",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "title[$search]",
                        "in": "query",
                        "description": "yes",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of all tracks"
                    }
                },
                "security": []
            },
            "post": {
                "description": "Creates a new track on the server. TODO: restrict access to admin.",
                "tags": [
                    "Track"
                ],
                "operationId": "Create track",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateTrackrequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created track"
                    }
                },
                "security": []
            }
        },
        "/tracks/{trackId}": {
            "get": {
                "description": "Used to search tracks (e.g. by name -> /tracks?title=Ba will return all tracks with title equal to \"Ba\")",
                "tags": [
                    "Track"
                ],
                "operationId": "Search tracks",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "trackId",
                        "in": "path",
                        "description": "ID of searched track",
                        "required": true,
                        "type": "string",
                        "format": "ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The searched track"
                    },
                    "default": {
                        "description": "Cannot find track with this ID"
                    }
                },
                "security": []
            }
        },
        "/users": {
            "get": {
                "description": "Returns a list of all users",
                "tags": [
                    "User"
                ],
                "operationId": "Find",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of all the users"
                    }
                },
                "security": []
            },
            "post": {
                "description": "Creates a new user on the server. ??TODO??: verity human user with captcha?",
                "tags": [
                    "User"
                ],
                "operationId": "Create user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserrequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created user"
                    }
                },
                "security": []
            }
        },
        "/users/{userId}": {
            "get": {
                "description": "Returns a JSON with user information and friends. Must use the specified user's token to GET this ressource.",
                "tags": [
                    "User"
                ],
                "operationId": "Get user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of searched user",
                        "required": true,
                        "type": "string",
                        "format": "ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The searched user"
                    },
                    "default": {
                        "description": "Cannot find user with this ID"
                    }
                },
                "security": []
            },
            "patch": {
                "description": "Patches a users fields. Should be user to update user's friends",
                "tags": [
                    "User"
                ],
                "operationId": "Patch user (change email)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PatchUserrequest"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to patch",
                        "required": true,
                        "type": "string",
                        "format": "ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user"
                    }
                },
                "security": []
            }
        }
    },
    "definitions": {
        "CreateAlbumrequest": {
            "title": "Create albumRequest",
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "year": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "required": [
                "title"
            ]
        },
        "Auth(local)request": {
            "title": "Auth (local) Request",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "required": [
                "email",
                "password"
            ]
        },
        "CreatePlaylistrequest": {
            "title": "Create playlist Request",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "public": {
                    "type": "boolean"
                },
                "tracks_ref": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "public",
                "tracks_ref"
            ]
        },
        "CreateTrackrequest": {
            "title": "Create track Request",
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                }
            },
            "required": [
                "title"
            ]
        },
        "PatchUserrequest": {
            "title": "Patch user Request",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            },
            "required": [
                "email"
            ]
        },
        "CreateUserrequest": {
            "title": "Create user Request",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "default": {
                    "type": "string"
                }
            },
            "required": [
                "type",
                "default"
            ]
        }
    }
}